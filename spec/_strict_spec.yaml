# Normalized Lua API for Lua 5.1, 5.2 & 5.3
# Copyright (C) 2014-2018 std.normalize authors

before: |
  this_module = 'std.normalize._strict'

  M = require(this_module)

specify std.normalize._strict:
- context when required:
  - it does not touch the global table:
      expect(show_apis {added_to='_G', by=this_module}).
         to_equal {}


# TODO: fix Specl so that it doesn't mangle the environments so badly
#       that the only way to run tests that need to mess with require
#       and/or package.loaded is from a separate Lua process :(
# TODO: find a clean API for patching functions in the environment
- describe strict:
  - before: |
      preamble = [[
         local env = {'MAGIC'}
         local _strict = require 'std._debug'.strict
         local os, package, print = os, package, print
         local function exit(x) os.exit(x and 0 or 1) end
      ]]

  - context with unreleased specl:
    - it does not break require:
        pending 'next point release of Specl 14.1'
        package.loaded['std.strict.init'] = 'MAGIC'
        expect(require 'std.strict.init').to_be 'MAGIC'

  - context std.strict is installed:
    - before: |
        postamble = preamble .. [[
           local require = require
           package.loaded['std.strict.init'] = 'MAGIC'
           local M = require 'std.normalize._strict'
        ]]
    - context when std._debug is not set:
      - it returns std.strict implementation:
          expect(luaproc(postamble .. [[
             exit(M.strict == 'MAGIC')
          ]])).to_succeed_with ''
    - context when std._debug is false:
      - it returns a pass-through environment setter:
          expect(luaproc([[
                require 'std._debug'(false)
             ]] .. postamble .. [[
             print(env == M.strict(env))
             exit(M.strict ~= require 'std.strict.init')
          ]])).to_succeed_while_matching '^true'
    - context when std._debug is true:
      - it returns std.strict implementation:
          expect(luaproc([[
             require 'std._debug'(true)
                ]] .. postamble .. [[
             exit(M.strict == require 'std.strict.init')
          ]])).to_succeed_with ''
    - context when std._debug.strict is not set:
      - it returns std.strict implementation:
          expect(luaproc([[
                require 'std._debug'.strict = nil
             ]] .. postamble .. [[
             exit(M.strict == require 'std.strict.init')
          ]])).to_succeed_with ''
    - context when std._debug.strict is false:
      - it returns std.strict implementation:
          expect(luaproc([[
                require 'std._debug'.strict = false
             ]] .. postamble .. [[
             print(env == M.strict(env))
             exit(M.strict ~= require 'std.strict.init')
          ]])).to_succeed_while_matching '^true'
    - context when std._debug.strict is true:
      - it returns std.strict implementation:
          expect(luaproc([[
                require 'std._debug'.strict = true
             ]] .. postamble .. [[
             exit(M.strict == require 'std.strict.init')
          ]])).to_succeed_with ''

  - context std.strict is not installed:
    - before: |
        postamble = preamble .. [[
           do
              local error, _require = error, require
              require = function(...)
                  local x = ...
                  if x == 'std.strict.init' then
                     error("module '" .. x .. "' not found", 2)
                  end
                  return _require(...)
              end
           end
           exit(env == require 'std.normalize._strict'.strict(env))
        ]]
    - context when std._debug is not set:
      - it returns a pass-through environment setter:
          expect(luaproc(postamble)).to_succeed_with ''
    - context when std._debug is false:
      - it returns a pass-through environment setter:
          expect(luaproc([[
             require 'std._debug'(false)
          ]] .. postamble)).to_succeed_with ''
    - context when std._debug is true:
      - it returns a pass-through environment setter:
          expect(luaproc([[
             require 'std._debug'(true)
          ]] .. postamble)).to_succeed_with ''
    - context when std._debug.strict is nil:
      - it returns a pass-through environment setter:
          expect(luaproc([[
             require 'std._debug'.strict = nil
          ]] .. postamble)).to_succeed_with ''
    - context when std._debug.strict is false:
      - it returns a pass-through environment setter:
          expect(luaproc([[
             require 'std._debug'.strict = false
          ]] .. postamble)).to_succeed_with ''
    - context when std._debug.strict is true:
      - it returns a pass-through environment setter:
          expect(luaproc([[
             require 'std._debug'.strict = true
          ]] .. postamble)).to_succeed_with ''

