# Normalized Lua API for Lua 5.1, 5.2 & 5.3
# Copyright (C) 2014-2018 std.normalize authors

# Many of these examples are a lot trickier than they look!
#
#  0. Specl is already doing weird things with `require` to ensure
#     that it runs in the context of the example and not in the
#     environment of the Specl implementation code, so things are
#     weird even before we touch anything here!
#  1. We need to capture(into local symbols) anything we still need
#     access to after calling `_strict`, because at that point
#     the execution environment is obliterated...
#  2. But, we can't capture `require` blindly, because some examples
#     rely on changing the global `require` used inside the `_typecheck`
#     implementation... and yet other examples call `require` after
#     calling `_strict`(and obliterating the environment).
#
# Don't be surprised if fiddling with these examples, or the code
# they exercise breaks in surprising ways at first!

before: |
  this_module = 'std.normalize._typecheck'

  M = require(this_module)

specify std.normalize._typecheck:
- context when required:
  - it does not touch the global table:
      expect(show_apis {added_to='_G', by=this_module}).
         to_equal {}


- describe argscheck:
  - before: |
      preamble = [[
         argscheck = require 'std.normalize._typecheck'.argscheck
         function inner() return 'MAGIC' end
         types = {
            woot = function() end,
            ohno = function(t, i) return nil, type(t[i]) .. ' unexpected' end,
         }
         local function exit(x) os.exit(x and 0 or 1) end
      ]]

      f = M.argscheck

  - context with bad arguments:
    - it diagnoses non-callable annotations:
        x = nil
        fn = function() end
        fntor = setmetatable({}, {__call=fn})
        expect(f 'callable' .. x).
           to_raise "attempt to annotate non-callable value with 'argscheck'"
        expect(f 'callable' .. fn).
           not_to_raise "attempt to annotate non-callable value with 'argscheck'"
        expect(f 'callable' .. fntor).
           not_to_raise "attempt to annotate non-callable value with 'argscheck'"

  - context when std._debug is not set:
    - it wraps the inner function:
        expect(luaproc(preamble .. [[
           magic = argscheck('magic', types.woot) .. inner
           print(magic())
           exit(magic ~= inner)
        ]])).to_succeed_with 'MAGIC\n'
    - it diagnoses argument validation failures: |
        expect(luaproc(preamble .. [[
           (argscheck('magic', types.ohno) .. inner) 'fail'
        ]])).to_fail_while_matching "bad argument #1 to 'magic' %(string unexpected%)"
  - context when std._debug is false:
    - before: |
        shamble = [[
            require 'std._debug' (false)
        ]] .. preamble
    - it returns a pass-through decorator:
        expect(luaproc(shamble .. [[
           magic = argscheck('magic', types.woot) .. inner
           exit(magic == inner)
        ]])).to_succeed_with ''
  - context when std._debug is true:
    - before: |
        shamble = [[
           require 'std._debug' (true)
        ]] .. preamble
    - it wraps the inner function:
        expect(luaproc(shamble .. [[
           magic = argscheck('magic', types.woot) .. inner
           print(magic())
           exit(magic ~= inner)
        ]])).to_succeed_with 'MAGIC\n'
    - it diagnoses argument validation failures: |
        expect(luaproc(shamble .. [[
           (argscheck('magic', types.ohno) .. inner) 'fail'
        ]])).to_fail_while_matching "bad argument #1 to 'magic' %(string unexpected%)"
  - context when std._debug.argcheck is nil:
    - before: |
        shamble = [[
           require 'std._debug'.argcheck = nil
        ]] .. preamble
    - it wraps the inner function:
        expect(luaproc(shamble .. [[
           magic = argscheck('magic', types.woot) .. inner
           print(magic())
           exit(magic ~= inner)
        ]])).to_succeed_with 'MAGIC\n'
    - it diagnoses argument validation failures: |
        expect(luaproc(shamble .. [[
           (argscheck('magic', types.ohno) .. inner) 'fail'
        ]])).to_fail_while_matching "bad argument #1 to 'magic' %(string unexpected%)"
  - context when std._debug..argcheck is false:
    - before: |
        shamble = [[
           require 'std._debug'.argcheck = false
        ]] .. preamble
    - it returns a pass-through decorator:
        expect(luaproc(shamble .. [[
           magic = argscheck('magic', types.woot) .. inner
           exit(magic == inner)
        ]])).to_succeed_with ''
  - context when std._debug.argcheck is true:
    - before: |
        shamble = [[
           require 'std._debug'.argcheck = true
        ]] .. preamble
    - it wraps the inner function:
        expect(luaproc(shamble .. [[
           magic = argscheck('magic', types.woot) .. inner
           print(magic())
           exit(magic ~= inner)
        ]])).to_succeed_with 'MAGIC\n'
    - it diagnoses argument validation failures: |
        expect(luaproc(shamble .. [[
           (argscheck('magic', types.ohno) .. inner) 'fail'
        ]])).to_fail_while_matching "bad argument #1 to 'magic' %(string unexpected%)"


- describe types:
  - before:
      function pack(...)
         return {n=select('#', ...), ...}
      end

      wrap = function(fn, n)
         return function(...)
            return pack(fn(pack(...), n or 1))
         end
      end

      T = M.types

  - context accept:
    - before:
        f = wrap(T.accept)
    - it accepts a missing value:
        expect(f()).to_equal {n=0}
    - it accepts a nil value:
        expect(f(nil)).to_equal {n=0}
    - it accepts anything else:
        expect(f(false)).to_equal {n=0}
        expect(f('1')).to_equal {n=0}
        expect(f(f)).to_equal {n=0}
        expect(f {f=f}).to_equal {n=0}

  - context arg:
    - before:
        f = wrap(T.arg)
    - it rejects a missing value:
        expect(f()).to_equal {'no value'; n=1}
    - it accepts a nil value:
        expect(f(nil)).to_equal {n=0}
    - it accepts anything else:
        expect(f(false)).to_equal {n=0}
        expect(f('1')).to_equal {n=0}
        expect(f(f)).to_equal {n=0}
        expect(f {f=f}).to_equal {n=0}

  - context boolean:
    - before:
        x = 'boolean'
        f = wrap(T[x])
    - it accepts a boolean value:
        expect(f(false)).to_equal {n=0}
        expect(f(true)).to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-boolean values:
        expect(f {}).to_equal {x; n=1}

  - context callable:
    - before:
        x = 'callable'
        f = wrap(T[x])
    - it accepts a callable value:
        expect(f(f)).to_equal {n=0}
        expect(f(setmetatable({}, {__call=f}))).to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-callable values:
        expect(f(false)).to_equal {x; n=1}

  - context function:
    - before:
        x = 'function'
        f = wrap(T[x])
    - it accepts a function value:
        expect(f(f)).to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-function values:
        expect(f(false)).to_equal {x; n=1}
        expect(f(setmetatable({}, {__call=f}))).
           to_equal {x; n=1}

  - context integer:
    - before:
        x = 'integer'
        f = wrap(T[x])
    - it accepts an integer-like value:
        expect(f(1234)).to_equal {n=0}
        expect(f '1234').to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-integer-like numbers:
        expect(f '123.000001').
           to_equal {nil, 'number has no integer representation'; n=2}
        expect(f(math.pi)).
           to_equal {nil, 'number has no integer representation'; n=2}
    - it rejects non-integer values:
        expect(f(false)).to_equal {x; n=1}

  - context missing:
    - before:
        f = wrap(T.missing)
    - it accepts a missing value:
        expect(f()).to_equal {n=0}
    - it rejects a nil value:
        expect(f(nil)).to_equal {nil; n=1}
    - it rejects anything else:
        expect(f(false)).to_equal {nil; n=1}
        expect(f('1')).to_equal {nil; n=1}
        expect(f(f)).to_equal {nil; n=1}
        expect(f {f=f}).to_equal {nil; n=1}

  - context nil:
    - before:
        x = 'nil'
        f = wrap(T[x])
    - it accepts a nil value:
        expect(f(nil)).to_equal {n=0}
    - it accepts a missing value:
        expect(f()).to_equal {n=0}
    - it rejects non-nil values:
        expect(f(false)).to_equal {x; n=1}

  - context number:
    - before:
        x = 'number'
        f = wrap(T[x])
    - it accepts a numeric value:
        expect(f(1234)).to_equal {n=0}
        expect(f(1234.567)).to_equal {n=0}
        expect(f(12e-34)).to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-number-like values:
        expect(f(false)).to_equal {x; n=1}
        expect(f '1234').to_equal {x; n=1}
        expect(f '1234.567').to_equal {x; n=1}

  - context string:
    - before:
        x = 'string'
        f = wrap(T[x])
    - it accepts a string value:
        expect(f '').to_equal {n=0}
        expect(f 'a string').to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-string values:
        stringy = function() return 'stringy' end
        expect(f(false)).to_equal {x; n=1}
        expect(f(setmetatable({}, {__tostring=stringy}))).
           to_equal {x; n=1}

  - context stringy:
    - before:
        x = 'string'
        f = wrap(T.stringy)
    - it accepts a string-like value:
        stringy = function() return 'stringy' end
        expect(f '').to_equal {n=0}
        expect(f 'a string').to_equal {n=0}
        expect(f(setmetatable({}, {__tostring=stringy}))).
           to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-string-like values:
        expect(f(false)).to_equal {x; n=1}
        expect(f(setmetatable({}, {__tostring='stringy'}))).
           to_equal {x; n=1}

  - context table:
    - before:
        x = 'table'
        f = wrap(T[x])
    - it accepts a table value:
        expect(f {}).to_equal {n=0}
        expect(f(pack(1, 2, 3))).to_equal {n=0}
    - it rejects missing value:
        expect(f()).to_equal {x, 'got no value'; n=2}
    - it rejects nil value:
        expect(f(nil)).to_equal {x; n=1}
    - it rejects non-table values:
        expect(f(false)).to_equal {x; n=1}

  - context value:
    - before:
        f = wrap(T.value)
    - it rejects a missing value:
        expect(f()).to_equal {'value', 'got no value'; n=2}
    - it rejects a nil value:
        expect(f(nil)).to_equal {'value'; n=1}
    - it accepts anything else:
        expect(f(false)).to_equal {n=0}
        expect(f '1').to_equal {n=0}
        expect(f(f)).to_equal {n=0}
        expect(f {f=f}).to_equal {n=0}


- describe any:
  - before:
      T = M.types
      f = M.any

      wrap = function(fn, n)
         return function(...)
            return pack(fn(pack(...), n or 1))
         end
      end

      called = {}
      function spy(x)
         return function(argu, i)
            called[#called + 1] = x
            return x
         end
      end

  - it returns a callable:
      expect(callable(f())).not_to_be(false)
  - it returns a callable that behaves like a type predicate:
      r = wrap(T.string)
      x = wrap(f(T.string))
      expect(x()).to_equal(r())
      expect(x(nil)).to_equal(r(nil))
      expect(x 'str').to_equal(r 'str')
  - it calls each of its own argument callables in order:
      wrap(f(spy 'one', spy 'two', spy 'five', spy 'four'))(pack('three'), 1)
      expect(called).to_equal {'one', 'two', 'five', 'four'}
  - it returns immediately with a single string predicate result:
      die = function() return nil, 'died' end
      x = wrap(f(spy 'before', die, spy 'after'))
      expect(x(false)).to_equal {nil, 'died'; n=2}
      expect(called).to_equal {'before'}
  - it collects mismatches into 'expected' result:
      x = wrap(f(T.table, T.number))
      expect(x(false)).to_equal {'number or table'; n=1}
  - it orders collected mismatches alphabetically:
      x = wrap(f(T.table, T.number, T['function'], T.string))
      expect(x(false)).
         to_equal {'function, number, string or table'; n=1}
  - it does not collect 'nil' mismatches:
      x = wrap(f(T.table, T['nil'], T.string))
      expect(x(false)).to_equal {'string or table'; n=1}
